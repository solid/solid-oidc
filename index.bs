<pre class='metadata'>
Title: Solid-OIDC
Boilerplate: issues-index no
Boilerplate: style-darkmode off
Local Boilerplate: logo yes
Shortname: solid-oidc
Level: 1
Status: w3c/CG-DRAFT
Group: Solid Community Group
Favicon: https://solidproject.org/TR/solid.svg
ED: https://solid.github.io/solid-oidc/
TR: https://solidproject.org/TR/oidc
!Editor's Draft: [https://solid.github.io/solid-oidc/](https://solid.github.io/solid-oidc/)
Repository: https://github.com/solid/solid-oidc
Inline Github Issues: title
Markup Shorthands: markdown yes
Max ToC Depth: 2
Editor: [Aaron Coburn](https://people.apache.org/~acoburn/#i) ([Inrupt](https://inrupt.com))
Editor: [elf Pavlik](https://elf-pavlik.hackers4peace.net/)
Editor: [Dmitri Zagidulin](http://computingjoy.com/)
Former Editor: [Adam Migus](https://migusgroup.com/about/) ([The Migus Group](https://migusgroup.com/))
Former Editor: [Ricky White](https://endlesstrax.com) ([The Migus Group](https://migusgroup.com/))
Test Suite: https://solid.github.io/solid-oidc-tests/
Metadata Order: This version, Latest published version, Editor's Draft, Test Suite, *, !*
Metadata Include: Editor's Draft off
Abstract:
  A key challenge on the path toward re-decentralizing user data on the Worldwide Web is the need to
  access multiple potentially untrusted resources servers securely. This document aims to address that
  challenge by building on top of current and future web standards, to allow entities to authenticate
  within a Solid ecosystem.
Status Text:
  This section describes the status of this document at the time of its publication.

  This document was published by the [Solid Community Group](https://www.w3.org/community/solid/) as
  an Editor’s Draft. The sections that have been incorporated have been reviewed following the
  [Solid process](https://github.com/solid/process). However, the information in this document is
  still subject to change. You are invited to [contribute](https://github.com/solid/solid-oidc/issues)
  any feedback, comments, or questions you might have.

  Publication as an Editor’s Draft does not imply endorsement by the W3C Membership. This is a draft
  document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate
  to cite this document as other than work in progress.

  This document was produced by a group operating under the [W3C Community Contributor License Agreement
  (CLA)](https://www.w3.org/community/about/process/cla/). A human-readable
  [summary](https://www.w3.org/community/about/process/cla-deed/) is available.
</pre>

# Introduction # {#intro}

*This section is non-normative*

The [Solid project](https://solidproject.org/) aims to change the way web applications work today to
improve privacy and user control of personal data by utilizing current standards, protocols, and
tools, to facilitate building extensible and modular decentralized applications based on
[Linked Data](https://www.w3.org/standards/semanticweb/data) principles.

This specification is written for Authorization and Resource Server owners intending to implement
Solid-OIDC. It is also useful to Solid application developers charged with implementing a Solid-OIDC
client.

The OAuth 2.0 [[!RFC6749]] and OpenID Connect Core 1.0 [[!OIDC.Core]] web standards were
published in October 2012 and November 2014, respectively. Since publication they've seen rapid and
widespread adoption across the industry, in turn gaining extensive *"real-world"* data and
experience. The strengths of the protocols are now clear; however, in a changing eco-system where
privacy and control of digital identities are becoming more pressing concerns, it is also clear
that additional functionality is required.

The additional functionality documented herein aims to address:

1. Resource servers and their Authorization servers having no existing trust relationship with identity providers.
2. Ephemeral Clients as a first-order use-case.

## Out of Scope ## {#intro-out-of-scope}

*This section is non-normative*

At the time of writing, there is no demonstrated use case for a strongly asserted identity; however,
it is likely that authorization requirements will necessitate it.

# Terminology # {#terms}

*This section is non-normative*

This specification uses the terms "access token", "authorization server", "resource server" (RS), "token endpoint",
"grant type", and "client" as defined by The OAuth 2.0 Authorization Framework [[!RFC6749]].

Throughout this specification, we will use the term OpenID Provider (OP) in line with the
terminology used in the Open ID Connect Core 1.0 specification (OIDC) [[!OIDC.Core]].
It should be noted that this is distinct from the entity referred to as an Authorization Server
by the OAuth 2.0 Authorization Framework (OAuth) [[!RFC6749]].

This specification also uses the following terms:

<dl>
<dt>*WebID* as defined by [[!WebID]]
<dd>
    A WebID is a URI with an HTTP or HTTPS scheme which denotes an Agent (Person, Organization, Group,
    Device, etc.).

<dt>*JSON Web Token (JWT)* as defined by [[!RFC7519]]
<dd>
    A string representing a set of claims as a JSON object that is encoded in a JWS or JWE, enabling the
    claims to be digitally signed or MACed and/or encrypted.

<dt>*JSON Web Key (JWK)* as defined by [[!RFC7517]]
<dd>
    A JSON object that represents a cryptographic key. The members of the object represent properties of
    the key, including its value.

<dt>*Demonstration of Proof-of-Possession at the Application Layer (DPoP)* as defined by [[!DPOP]]
<dd>
    A mechanism for sender-constraining OAuth tokens via a proof-of-possession mechanism on the
    application level.

<dt>*DPoP Proof* as defined by [[!DPOP]]
<dd>
    A DPoP proof is a JWT that is signed (using JWS) using a private key chosen by the client.

<dt>*Proof Key for Code Exchange (PKCE)* as defined by [[!RFC7636]]
<dd>
    An extension to the Authorization Code flow which mitigates the risk of an authorization code
    interception attack.
</dl>

# Core Concepts # {#concepts}

*This section is non-normative*

In a decentralized ecosystem, such as Solid, an OP may be an identity-as-a-service vendor or, at
the other end of the spectrum, a user-controlled OP. In any case, the user may be authenticating
from a browser or an application.

Therefore, this specification assumes the use of the
[Authorization Code Flow](https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowSteps) with
PKCE, in accordance with OAuth and OIDC best practices. It is also assumed that there are no
preexisting trust relationships with the OP. This means that client registration, whether dynamic,
or static, is entirely optional.

## WebIDs ## {#concepts-webids}

*This section is non-normative*

In line with Linked Data principles, a WebID is a HTTP URI that,
when dereferenced, resolves to a profile document that is structured data in an
[RDF 1.1 format](https://www.w3.org/TR/rdf11-concepts/). This profile document allows
people to link with others to grant access to identity resources as they see fit. WebIDs underpin
Solid and are used as a primary identifier for Users in this specification.

# Basic Flow # {#basic-flow}

*This section is non-normative*

Details of the flow are available in [[!Solid.OIDC.Primer]]

<figure id="fig-signature">
    <img src="sequence.mmd.svg" />
    <figcaption>Basic sequence of authenticating the user and the client.</figcaption>
</figure>

# Client Identifiers # {#clientids}

OAuth and OIDC require the Client application to identify itself to the OP and RS by presenting a
[client identifier](https://tools.ietf.org/html/rfc6749#section-2.2) (Client ID). Solid applications
SHOULD use a URI that can be dereferenced as a [Client ID Document](#clientids-document).

Issue(78):

## Client ID Document ## {#clientids-document}

When a Client Identifier is dereferenced, the resource MUST be serialized as an `application/ld+json` document
unless content negotiation requires a different outcome.

The serialized JSON form of a Client ID Document MUST use the normative JSON-LD `@context`
provided at `https://www.w3.org/ns/solid/oidc-context.jsonld` such that the resulting
document produces a JSON serialization of an OIDC client registration, per the
definition of client registration metadata from [[!RFC7591]] section 2.

Also, the OP MUST dereference the Client ID Document and match any Client-supplied parameters
with the values in the Client ID Document.

Further, the `redirect_uri` provided by the Client MUST be included in the registration `redirect_uris`
list.

This example uses [JSON-LD ](https://www.w3.org/TR/json-ld11/) for the Client ID Document:

<div class='example'>
    <p>https://app.example/id</p>

    <pre highlight="jsonld">
        {
          "@context": ["https://www.w3.org/ns/solid/oidc-context.jsonld"],

          "client_id": "https://app.example/id",
          "client_name": "Solid Application Name",
          "redirect_uris": ["https://app.example/callback"],
          "post_logout_redirect_uris": ["https://app.example/logout"],
          "client_uri": "https://app.example/",
          "logo_uri" : "https://app.example/logo.png",
          "tos_uri" : "https://app.example/tos.html",
          "scope" : "openid profile offline_access webid",
          "grant_types" : ["refresh_token","authorization_code"],
          "response_types" : ["code"],
          "default_max_age" : 3600,
          "require_auth_time" : true
        }
    </pre>
</div>

Issue(95):

### JSON-LD context ### {#jsonld-context}

This specification defines a JSON-LD context for use with OIDC Client ID Documents. This context is
available at `https://www.w3.org/ns/solid/oidc-context.jsonld`. Client ID Documents that reference
this JSON-LD context MUST use the HTTPS scheme.

NOTE: the `oidc` vocabulary that is part of this context uses the HTTP scheme.

Full content of JSON-LD context can be also seen in [[#full-jsonld-context]]

## OIDC Registration ## {#clientids-oidc}

If the Client does not use an identifier that can be dereferenced, then it MUST present a client identifier
registered with the OP via either OIDC dynamic or static registration.
See also [[!OIDC.DynamicClientRegistration]].

# WebID Profile # {#webid-profile}

Dereferencing the WebID URL results in a WebID Profile.

Issue(76):

## OIDC Issuer Discovery ## {#oidc-issuer-discovery}

A WebID Profile lists the OpenID Providers who are trusted to issue tokens on behalf
of the agent who controls the WebID. This prevents a malicious OpenID Provider from issuing
otherwise valid ID Tokens for arbitrary WebIDs. An entity that verifies ID Tokens will use this
mechanism to determine if the issuer is authoritative for the given WebID.

<figure class="example">
    <pre highlight="turtle">
      PREFIX solid: &lt;http://www.w3.org/ns/solid/terms#&gt;

      &lt;#id&gt; solid:oidcIssuer &lt;https://oidc.example&gt; .
    </pre>
    <figcaption>WebID Profile specifying an OIDC issuer</figcaption>
</figure>

To discover a list of valid issuers, the WebID Profile MUST be checked for the existence of statements matching
<pre highlight="sparql">
  ?webid &lt;http://www.w3.org/ns/solid/terms#oidcIssuer&gt; ?iss .
</pre>
where `?webid` is set to WebID. The `?iss` will result in an IRI denoting valid issuer for that WebID.
The WebID Profile Document MUST include one or more statements matching the OIDC issuer pattern.

Issue(80):

Issue(92):

Issue(91):

### OIDC Issuer Discovery via Link Headers ### {#oidc-issuer-discovery-link-headers}

A server hosting a WebID Profile Document MAY transmit the `http://www.w3.org/ns/solid/terms#oidcIssuer`
values via Link Headers, but they MUST be the same as in the RDF representation.
A client MUST treat the RDF in the body of the WebID Profile as canonical
but MAY use the Link Header values as an optimization.

<figure class="example">
    <pre highlight="http">
        Link: &lt;https://oidc.example&gt;;
              rel="http://www.w3.org/ns/solid/terms#oidcIssuer";
              anchor="#id"
    </pre>
    <figcaption>HTTP response Link Header (line breaks added for readibility)</figcaption>
</figure>


# Requesting the WebID Claim using a Scope Value # {#webid-scope}

In OpenID Connect, `scope` values are used to request that particular information be make available as claim values.

Solid-OIDC defines the following `scope` value for use with claim requests:

<dl>
<dt>*webid*
<dd>
    REQUIRED. This scope requests access to the End-User's `webid` Claim.
</dl>

# Token Instantiation # {#tokens}

Assuming one of the following options
 - Client ID and Secret, and valid DPoP Proof (for dynamic and static registration)
 - Dereferencable Client Identifier with a proper Client ID Document and valid DPoP Proof (for a Solid client identifier)

the OP MUST return A DPoP-bound OIDC ID Token.

## DPoP-bound OIDC ID Token ## {#tokens-id}

When requesting a DPoP-bound OIDC ID Token, the Client MUST send a DPoP proof JWT
that is valid according to the [[DPOP#section-5]]. The DPoP proof JWT is used to
bind the OIDC ID Token to a public key. See also: [[!DPOP]].

With the `webid` scope, the DPoP-bound OIDC ID Token payload MUST contain these claims:
 * `webid` — The WebID claim MUST be the user's WebID.
 * `iss` — The issuer claim MUST be a valid URL of the OP
    instantiating this token.
 * `aud` — The audience claim MUST be an array of values.
    The values MUST include the authorized party claim `azp`
    and the string `solid`.
    In the decentralized world
    of Solid OIDC, the audience of an ID Token is not only the client (`azp`),
    but also any Solid Authorization Server at any accessible address
    on the world wide web (`solid`). See also: [[RFC7519#section-4.1.3]].
 * `azp` - The authorized party claim is used to identify the client
    (See also: [section 5. Client Identifiers](#clientids)).
 * `iat` — The issued-at claim is the time at which the DPoP-bound
    OIDC ID Token was issued.
 * `exp` — The expiration claim is the time at which the DPoP-bound
    OIDC ID Token becomes invalid.
 * `cnf` — The confirmation claim is used to identify the DPoP Public
    Key bound to the OIDC ID Token. See also: [[DPOP#section-7]].

<div class="example">
    <p>An example OIDC ID Token:

    <pre highlight="json">
        {
            "webid": "https://janedoe.com/web#id",
            "iss": "https://idp.example.com",
            "sub": "janedoe",
            "aud": ["https://client.example.com/web#id", "solid"],
            "azp": "https://client.example.com/web#id",
            "iat": 1311280970,
            "exp": 1311281970,
            "cnf":{
              "jkt":"0ZcOCORZNYy-DWpqq30jZyJGHTN0d2HglBV3uiguA4I"
            }
        }
    </pre>
</div>

Issue(26):

Issue(47):

### ID Token Validation ### {#id-token-validation}

An ID Token must be validated according to [OIDC.Core, Section 3.1.3.7](https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation)

The Verifying party MUST perform [[#oidc-issuer-discovery]] using the value of the `webid` claim
to dereference the WebID Profile Document.

Unless the verifying party acquires OP keys through some other means, or it chooses to reject tokens issued by this OP,
the verifying party MUST follow OpenID Connect Discovery 1.0 [[!OIDC.Discovery]] to find an OP's signing keys (JWK).

# Resource Access # {#resource}

## Authorization Server Discovery ## {#authorization-server-discovery}

When a Client performs an unauthenticated request to a protected resource,
the Resource Server MUST respond with the HTTP <code>401</code> status code,
and a <code>WWW-Authenticate</code> HTTP header. See also: [[RFC7235#section-4.1]]

The <code>WWW-Authenticate</code> HTTP header MUST include an <code>as_uri</code>
parameter unless the authentication scheme requires a different mechanism
for discovering an associated authorization server.

Authorization Servers SHOULD implement User-Managed Access (UMA) 2.0 Grant for
OAuth 2.0 Authorization [[!UMA]].

## Obtaining an Access Token ## {#obtaining-access-token}

For Authorization Servers that conform to [[!UMA]], the
<code>http://openid.net/specs/openid-connect-core-1_0.html#IDToken</code> profile MUST
be supported. This profile MUST be advertised in the <code>uma_profiles_supported</code>
metadata of the Authorization Server discovery document [[UMA#rfc.section.2]].

When using the <code>http://openid.net/specs/openid-connect-core-1_0.html#IDToken</code>
profile with an UMA-based Authorization Server, the Authorization Server MUST be capable
of exchanging a valid Solid-OIDC ID Token [[#tokens-id]] for an OAuth 2.0 Access Token.

Note: Clients can push additional claims by requesting an upgraded RPT [[UMA#rfc.section.3.3.1]]

Authorization Server MUST pefrom [[#dpop-validation]] and [[#id-token-validation]]

## DPoP Validation ## {#dpop-validation}

A DPoP Proof that is valid according to
[DPoP Internet-Draft, Section 4.3](https://tools.ietf.org/html/draft-ietf-oauth-dpop-04#section-4.3),
MUST be present when a DPoP-bound OIDC ID Token is used.

The DPoP-bound OIDC ID Token MUST be validated according to
[DPoP Internet-Draft, Section 6](https://tools.ietf.org/html/draft-ietf-oauth-dpop-04#section-6),
but the AS MAY perform additional verification in order to determine whether to grant access to the
requested resource.

# Solid-OIDC Conformance Discovery # {#discovery}

An OpenID Provider that conforms to the Solid-OIDC specification MUST advertise it in the OpenID Connect
Discovery 1.0 [[!OIDC.Discovery]] resource by including `webid` in its `scopes_supported` metadata property.

<div class="example">
    <pre highlight="json">
        {
            "scopes_supported": ["openid", "offline_access", "webid"]
        }
    </pre>
</div>

# Security Considerations # {#security}

*This section is non-normative*

As this specification builds upon existing web standards, security considerations from OAuth, OIDC,
PKCE, and the DPoP specifications may also apply unless otherwise indicated. The following
considerations should be reviewed by implementors and system/s architects of this specification.

Some of the references within this specification point to documents with a
Living Standard or Draft status, meaning their contents can still change over
time. It is advised to monitor these documents, as such changes might have
security implications.

In addition to above considerations, implementors should consider the Security
Considerations in context of the Solid Protocol [[!Solid.Protocol]].

## TLS Requirements ## {#security-tls}

All TLS requirements outlined in [[BCP195](https://tools.ietf.org/html/bcp195)] apply to this
specification.

All tokens, Client, and User credentials MUST only be transmitted over TLS.

## Client IDs ## {#security-client-ids}

An AS SHOULD assign a fixed set of low trust policies to any client identified as anonymous.

Implementors SHOULD expire ephemeral Client IDs that are kept in server storage to mitigate the
potential for a bad actor to fill server storage with unexpired or otherwise useless Client IDs.

## Client Secrets ## {#security-client-secrets}

Client secrets SHOULD NOT be stored in browser local storage. Doing so will increase the risk of
data leaks should an attacker gain access to Client credentials.

## Client Trust ## {#security-client-trust}

*This section is non-normative*

Clients are ephemeral, client registration is optional, and most Clients cannot keep secrets. These,
among other factors, are what makes Client trust challenging.

# Privacy Considerations # {#privacy}

## OIDC ID Token Reuse ## {#privacy-token-reuse}

*This section is non-normative*

With JWTs being extendable by design, there is potential for a privacy breach if OIDC ID Tokens get
reused across multiple authorization servers. It is not unimaginable that a custom claim is added to the
OIDC ID Token on instantiation. This addition may unintentionally give other authorization servers
consuming the OIDC ID Token information about the user that they may not wish to share outside of the
intended AS.

# Acknowledgments # {#acknowledgments}

*This section is non-normative*

The Solid Community Group would like to thank the following individuals for reviewing and providing
feedback on the specification (in alphabetical order):

Tim Berners-Lee, Justin Bingham, Sarven Capadisli, Aaron Coburn, Matthias Evering, Jamie Fiedler,
Michiel de Jong, Ted Thibodeau Jr, Kjetil Kjernsmo, Mitzi László, Pat McBennett, Adam Migus, Jackson Morgan, Davi
Ottenheimer, Justin Richer, severin-dsr, Henry Story, Michael Thornburgh, Emmet Townsend, Ruben
Verborgh, Ricky White, Paul Worrall, Dmitri Zagidulin.

# Appendix A: Full JSON-LD context # {#full-jsonld-context}

The JSON-LD context is defined as:

<pre highlight="jsonld">
  {
    "@context": {
      "@version": 1.1,
      "@protected": true,
      "oidc": "http://www.w3.org/ns/solid/oidc#",
      "xsd": "http://www.w3.org/2001/XMLSchema#",
      "client_id": {
        "@id": "@id",
        "@type": "@id"
      },
      "client_uri": {
        "@id": "oidc:client_uri",
        "@type": "@id"
      },
      "logo_uri": {
        "@id": "oidc:logo_uri",
        "@type": "@id"
      },
      "policy_uri": {
        "@id": "oidc:policy_uri",
        "@type": "@id"
      },
      "tos_uri": {
        "@id": "oidc:tos_uri",
        "@type": "@id"
      },
      "redirect_uris": {
        "@id": "oidc:redirect_uris",
        "@type": "@id",
        "@container": [
          "@id",
          "@set"
        ]
      },
      "require_auth_time": {
        "@id": "oidc:require_auth_time",
        "@type": "xsd:boolean"
      },
      "default_max_age": {
        "@id": "oidc:default_max_age",
        "@type": "xsd:integer"
      },
      "application_type": {
        "@id": "oidc:application_type"
      },
      "client_name": {
        "@id": "oidc:client_name"
      },
      "contacts": {
        "@id": "oidc:contacts"
      },
      "grant_types": {
        "@id": "oidc:grant_types"
      },
      "response_types": {
        "@id": "oidc:response_types"
      },
      "scope": {
        "@id": "oidc:scope"
      },
      "token_endpoint_auth_method": {
        "@id": "oidc:token_endpoint_auth_method"
      }
    }
  }
</pre>

<pre class=biblio>
{
    "DPOP": {
        "authors": [
            "D. Fett",
            "B. Campbell",
            "J. Bradley",
            "T. Lodderstedt",
            "M. Jones",
            "D. Waite"
        ],
        "href": "https://tools.ietf.org/html/draft-ietf-oauth-dpop",
        "title": "OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)",
        "publisher": "IETF"
    },
    "OIDC.Core": {
        "authors": [
            "N. Sakimura",
            "J. Bradley",
            "M. Jones",
            "B. de Medeiros",
            "C. Mortimore"
        ],
        "href": "https://openid.net/specs/openid-connect-core-1_0.html",
        "title": "OpenID Connect Core 1.0",
        "publisher": "The OpenID Foundation"
    },
    "OIDC.Discovery": {
        "authors": [
            "N. Sakimura",
            "J. Bradley",
            "M. Jones",
            "E. Jay"
        ],
        "href": "https://openid.net/specs/openid-connect-discovery-1_0.html",
        "title": "OpenID Connect Discovery 1.0",
        "publisher": "The OpenID Foundation"
    },
    "OIDC.DynamicClientRegistration": {
        "authors": [
            "N. Sakimura",
            "J. Bradley",
            "M.B. Jones"
        ],
        "href": "https://openid.net/specs/openid-connect-registration-1_0.html",
        "title": "OpenID Connect Dynamic Client Registration 1.0",
        "publisher": "The OpenID Foundation"
    },
    "Solid.Protocol": {
        "authors": [
            "Sarven Capadisli",
            "Tim Berners-Lee",
            "Ruben Verborgh",
            "Kjetil Kjernsmo",
            "Justin Bingham",
            "Dmitri Zagidulin"
        ],
        "href": "https://solidproject.org/TR/protocol",
        "title": "Solid Protocol",
        "publisher": "W3C Solid Community Group"
    },
    "Solid.OIDC.Primer": {
        "authors": [
            "Jackson Morgan",
            "Aaron Coburn",
            "Matthieu Bosquet"
        ],
        "href": "https://solid.github.io/solid-oidc/primer/",
        "title": "Solid-OIDC Primer",
        "publisher": "W3C Solid Community Group"
    },
    "WebID": {
        "authors": [
            "Andrei Sambra",
            "Henry Story",
            "Tim Berners-Lee"
        ],
        "href": "https://www.w3.org/2005/Incubator/webid/spec/identity/",
        "title": "WebID 1.0",
        "publisher": "WebID Incubator Group"
    },
    "UMA": {
        "authors": [
            "Eve Maler",
            "Maciej Machulak",
            "Justin Richer"
        ],
        "href": "https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-grant-2.0.html",
        "title": "User-Managed Access (UMA) 2.0 Grant for OAuth 2.0 Authorization",
        "publisher": "Kantara Initiative, Inc"
    }
}
</pre>
